#
# This is a command file.
#
# To make a new test, all you have to do is:
#   1.  Make a new directory under tests/
#   2.  Put a file like this (named "command") into that directory.
#
# The contents of this file will be passed to the shell (Bash or SSH),
# so any legal shell commands can go in this file.
# Or comments like this one, for that matter.
#
# Variable substiution is done using Python's printf format,
# meaning you need a percent sign, the variable name in parentheses,
# and the letter 's' (for 'string').
#
# Available variables include:
#   workdir     the directory where test input files have been copied,
#               and where test output files should end up.
#   minidir     the base directory where Mini lives
#   database    where the Mini database lives
#   bin         where the Mini binaries live
#   binext      the extension on binary files, like ".linuxgccrelease"
#   python      the full path to the Python interpretter
#
# The most important thing is that the test execute in the right directory.
# This is especially true when we're using SSH to execute on other hosts.
# All command files should start with this line:
#

cd %(workdir)s

# making script terminate with error after any command that return non zero exit code
set -e

#
# After that, do whatever you want.

# Some time test could output information which is might be of interest but not stable from
# run-to-run: run times, memory consumption and so on. To preserve this information please save it in file with ‘.ignore’ extension:
date > start-time.ignore

#
# It's nice to test that the executable exists first, to ensure the test actually runs:
#
[ -x %(minidir)s/src/apps/public/DRRAFTER/DRRAFTER.py ] || exit 1
#
# Files will be diffed verbatim, so if you want to log output and compare it,
# you'll need to filter out lines that change randomly (e.g. timings).
# Prefixing your tests with "nice" is probably good form as well.
# Don't forget to use -testing:INTEGRATION_TEST  so results are reproducible.
# Here's a typical test for a Mini binary, assuming there's a "flags" file
# in this directory too:

# TESTPYTHON=`which python3`
# %(python3)s -m venv virtual_env_for_networkx >> install_log.ignore 2>&1
# source virtual_env_for_networkx/bin/activate >> install_log.ignore 2>&1
# if [ "$TESTPYTHON" -eq `which python3` ] ; then
#     echo "Awful! Environment activation failed." >> install_log.ignore 2>&1
#     exit 1
# fi
# `which python3` -m pip install networkx mrcfile >> install_log.ignore 2>&1

%(python3)s %(minidir)s/src/apps/public/DRRAFTER/DRRAFTER.py -fasta fasta.txt -secstruct secstruct.txt -start_struct full_start_struct.pdb -map_file empty_segmented_map.mrc -map_reso 8.0 -residues_to_model A:1-101 B:1-77 -include_residues_around D:137 D:395 -include_as_rigid_body_structures part_of_PBS_helix.pdb start_PBS_bp_helix.pdb trna_helix_1.pdb trna_helix_2.pdb  trna_helix_3.pdb  trna_helix_4.pdb vrna_helix_1.pdb vrna_helix_2.pdb vrna_helix_3.pdb vrna_helix_4.pdb vrna_helix_5.pdb -job_name test -no_initial_structures -ref_pdb_for_coord_csts full_start_struct.pdb 2>&1 \
    | egrep -vf ../../ignore_list \
    > log

test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so
# ^^^^ you want to add this line after each call to app-protocol in case they terminate abnormally

# deactivate
# rm -r virtual_env_for_networkx install_log.ignore

#
# Or if you don't care whether the logging output changes:
#
## %(bin)s/MY_MINI_PROGRAM.%(binext)s %(additional_flags)s @flags -database %(database)s -testing:INTEGRATION_TEST  2>&1 \
##     > /dev/null
#

date > finish-time.ignore

#
# This is a command file.
#
# To make a new test, all you have to do is:
#   1.  Make a new directory under tests/
#   2.  Put a file like this (named "command") into that directory.
#
# The contents of this file will be passed to the shell (Bash or SSH),
# so any legal shell commands can go in this file.
# Or comments like this one, for that matter.
#
# Variable substiution is done using Python's printf format,
# meaning you need a percent sign, the variable name in parentheses,
# and the letter 's' (for 'string').
#
# Available variables include:
#   workdir     the directory where test input files have been copied,
#               and where test output files should end up.
#   minidir     the base directory where Mini lives
#   database    where the Mini database lives
#   bin         where the Mini binaries live
#   binext      the extension on binary files, like ".linuxgccrelease"
#
# The most important thing is that the test execute in the right directory.
# This is especially true when we're using SSH to execute on other hosts.
# All command files should start with this line:
#

cd %(workdir)s


# It's nice to test that the executable exists first, to ensure the test actually runs:
#

[ -x %(template_dir)s/add_citation_by_pubmed_id.py ] || exit 1

#
# Files will be diffed verbatim, so if you want to log output and compare it,
# you'll need to filter out lines that change randomly (e.g. timings).
# Prefixing your tests with "nice" is probably good form as well.
# Don't forget to use -testing:INTEGRATION_TEST  so results are reproducible.
# Here's a typical test for a Mini binary, assuming there's a "flags" file
# in this directory too:
#

# Test the script.  Note that this test requires pubmed-lookup to be installed first with
# "pip install pubmed-lookup" or "pip3 install pubmed-lookup".
echo "Testing addition of two citations to the Rosetta database." >>out.log
cp -v database/citations/rosetta_citations.txt database/citations/rosetta_citations.original.txt
%(python3)s %(template_dir)s/add_citation_by_pubmed_id.py --database database/ --pmid 19717430 >>out.log 2>err1.log
test "${PIPESTATUS[0]}" != '0' && exit 1 || echo "First script ran successfully."

sleep 5

%(python3)s %(template_dir)s/add_citation_by_pubmed_id.py --database database/ --pmid 19880752 >>out.log 2>err2.log
test "${PIPESTATUS[0]}" != '0' && exit 1 || echo "Second script ran successfully."

# Check that output matches expected:
cmp -s database/citations/expected_output.txt database/citations/rosetta_citations.txt && echo "Output matches expectation." || exit 1 >>out.log

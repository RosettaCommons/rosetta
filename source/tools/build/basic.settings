# -*- mode:python;indent-tabs-mode:nil;show-trailing-whitespace:t; -*-
#
# (c) Copyright Rosetta Commons Member Institutions.
# (c) This file is part of the Rosetta software suite and is made available under license.
# (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
# (c) For more information, see http://www.rosettacommons.org. Questions about this can be
# (c) addressed to University of Washington CoMotion, email: license@uw.edu.

"""The settings below are combined together to create the final set of settings
for the entire build.  They are combined in the order listed below, with each
new setting potentially changing the current combination.

This system does not claim to be perfect for all situations but trying to
determine a precise order for each possible combination is combinatorially
intractable.  Thus the order here may need to be customized and note that the
system does not currently warn you if any of the current combinations doesn't
occur, to prevent lots of mostly spurious messages.

   - os
   - os, os_version
   - compiler
   - compiler, compiler_version
   - compiler, kind
   - compiler, os
   - compiler, compiler_version, os
   - compiler, os, os_version
   - compiler, compiler_version, os, os_version
   - compiler, arch
   - compiler, compiler_version, arch
   - compiler, arch, arch_size
   - compiler, compiler_version, arch, arch_size
   - compiler, os, arch, arch_size
   - compiler, mode
   - compiler, compiler_version, mode
   - compiler, os, mode
   - compiler, compiler_version, os, mode
   - compiler, arch, mode
   - compiler, compiler_version, arch, mode
   - compiler, os, arch
   - compiler, os, arch, mode
   - compiler, extra
   - compiler, os, extra
   - compiler, os, os_version, extra

There are four ways to combine settings:
   - "prepends" add the contents of the settings in front of any existing
     settings.
   - "appends" add the contents of the settings at the end of any existing
     settings.
   - "overrides" replace the existing settings with the given settings.
   - "removes" remove a particular setting from the contents (but only that
     settings, so they are more precise than an override to an empty set.)

The settings use Python syntax, and all of them are currently either strings or
lists of strings.

"""

import os, os.path, subprocess

add_on_libraries = ''

# checking if we compiling under Alpine Linux
if os.path.isfile('/etc/alpine-release'): add_on_libraries = 'execinfo'

settings = {
    "base" : {
        "overrides" : {
            # SCons starts CXXFLAGS with a reference to CCFLAGS.
            # We want the two to be separate.
            "CCFLAGS" : "",
            "CXXFLAGS" : "",
            # SCons starts with a (short) default PATH.
            # We want only what is explicitly specified here.
            "program_path" : [
                "/bin",
                "/usr/bin",
                "/usr/local/bin",
            ],
            # Leading '#' means relative to the base directory, (i.e.,
            # main/external/boinc/api, etc.)
            "include_path" : [

            # now done with -isystem flag at "compiler" handles
                # "#external/libxml2/include",
                # "#external/boost_submod",
                # "#external/",
                # "#external/dbio",
            ],
            "library_path" : [
                "/usr/lib",
                "/usr/local/lib",
            ],
            "defines" : [
                "BOOST_ERROR_CODE_HEADER_ONLY",
                "BOOST_SYSTEM_NO_DEPRECATED",
                "BOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS",
                "BOOST_DISABLE_THREADS",
                "PTR_STD",
            ],
	    "libraries" : add_on_libraries.split(),
            "flags" : {
	    },
        },
    },


    # Set a baseline environment for supported operating systems.

    "linux" : {},

    # Note: Setting the above paths for Windows is only useful in site.settings
    # as there is no standard location for installed libraries and headers.
    "windows" : {},

    "macos" : {
        "overrides" : {
            "library_path" : [ "/usr/lib", ],
        },
    },

    "cygwin" : {  # Is this correct for Cygwin?
        "prepends" : {
            "library_path" : [ "lib/cygwin/", ],
        },
        "overrides" : {
            #"libraries" : [ "z --enable-auto-import" ],
            "flags" : {
                "link" : [
                    "lz -Xlinker --enable-auto-import -Xlinker --export-all-symbols",
                ],
                #"ld" : [ "-enable-auto-import", ],
            }
        },
    },


    # Setup the environment for compilers and compilers run with other build
    # options.

    ###########################################################################
    # GCC #####################################################################
    ###########################################################################

    "gcc" : {
        "appends" : {
            "flags" : {
                # The "isystem" items here are to tell GCC not to print warn-
                # ings from these external headers.
                "cc" : [
                    "std=c99",
                    "isystem external/boost_submod/",
                    "isystem external/",
                    "isystem external/include/",
                    "isystem external/dbio/",
                    "isystem external/libxml2/include",
                    "isystem external/rdkit",
                ],
                "cxx" : [
                    "std=c++0x",
                    "ffor-scope",

                    "isystem external/boost_submod/",
                    "isystem external/",
                    "isystem external/include/",
                    "isystem external/dbio/",
                    "isystem external/libxml2/include",
                    "isystem external/rdkit",

                    #"fno-omit-frame-pointer", # -- useful for profiling on linux using RotateRight's Zoom profiler
                ],
                "compile" : [
                    "pipe",
                ],
                # By default, warn about everything except the use of
                # long long, which we need for certain database functionality.
                "warn" : [
                    "Wall",
                    "Wextra",
                    #"Wshadow", # Just in debug mode for now
                    "pedantic",
                    "Werror", # REMOVE FOR RELEASE
                    "Wno-long-long",
                    "Wno-strict-aliasing",
                ],
		'link' : [
		    # looks like of Linux distributions by default use `--enable-new-dtypes` which store rpath in `RUNPATH` field (instead of `RPATH`),
		    # above lead to situation when path to Rosetta libsqlite3 could not be resolved unless it standard path or in LD_LIBRARY_PATH
		    # this option restore old behaviour
		    'Wl,--disable-new-dtags',
		],
            },
        },
    },

    # OSs & architecures ######################################################

    "gcc, linux" : {
        "appends" : {
            "flags" : { },
        },
    },

    "gcc, macos" : {
        "appends" : {
            "flags" : {
                "warn"  : [ ],
                "link" : [ "Wl,-stack_size,4000000,-stack_addr,0xc0000000" ],
                # Change 'abspath' to 'file' to use DYLD_LIBRARY_PATH
                # environment variable
                "shlink" : [ "install_name ${TARGET.abspath}" ],
            },
        },
        "removes" : {
            "flags" : {
                "link" : [ "$__RPATH" ],
                "shlink" : [ "$LINKFLAGS" ],
                "warn" : [
                    # For some reason, despite using isystem for boost,
                    # Mac.gcc.debug mode is throwing an error from an unused
                    # param in boost!
                    "Werror=unused-parameter",
                    # There is at least one variable only used on non-Macs.
                    "Werror=unused-variable",
                    # These don't exist in the Mac version of GCC used by the
                    # test server:
                    "Werror=enum-compare",
                    "Werror=type-limits",
                    "Werror=ignored-qualifiers",
                ],
            },
        },
    },

    "gcc, x86, 32" : {
        "appends" : {
            "flags" : {
                "compile" : [
                    "malign-double",
                    "march=pentium4"
                ],
            },
        },
    },

    "gcc, x86, 64" : {
        "appends" : {
            "flags" : {
                # XXX: march=k8 is (?) the default.  There may be a speedup
                # XXX: with =nocona on Intel EM64T or =opteron on Opteron.
                "compile" : [
                    "march=core2",
                    "mtune=generic",
                ],
            },
        },
    },


    "gcc, macos, x86" : {
        "removes" : {
            "flags" : {
                "compile"   : [ "malign-double", "march=pentium4" ],
            },
        },
    },

    "gcc, macos, x86, 32" : {  # Mac Intel 32-bit
        "appends" : {
            "flags" : {
                "compile" : [
                    "m32",
                    "march=prescott",
                    "mtune=generic"
                ],
                "shlink" : [ "m32" ],
                "link" : [ "m32" ],
            },
        },
    },

    "gcc, macos, x86, 64" : {  # Mac Intel 64-bit
        "appends" : {
            "flags" : {
                "compile" : [
                    "m64",
                    "march=nocona",
                    "mtune=generic"
                ],
                "shlink" : [ "m64" ],
                "link" : [
                    "m64",
                    "Wl,-stack_size,4000000"
                ],
            },
        },
        "removes" : {
            "flags" : {
                "link"  : [ "Wl,-stack_size,4000000,-stack_addr,0xc0000000" ],
            },
        },
    },

    "gcc, amd" : {
        "appends" : {
            "flags" : {
                "compile" : [
                    "malign-double",
                    "march=athlon"
                ],
            },
        },
    },


    # modes ###################################################################

    "gcc, debug" : {
        "appends" : {
            "flags" : {
                "compile" : [ "O0" ],
                "mode" : [
                    "g",
                    "ggdb",
                    "ffloat-store"
                    # "fstack-check"
                ],
                "warn" : [
                    #"Wshadow",
                ],
            },
            # enable STL debug mode, see https://gcc.gnu.org/onlinedocs/libstdc++/manual/debug_mode_using.html
            "defines" : [ "_GLIBCXX_DEBUG" ],
        },
    },

    "gcc, release" : {
        "appends" : {
            "flags" : {
                "compile" : [
                    "O3",
                    "ffast-math",
                    "fno-finite-math-only", # Needed with -ffast-math for proper handling of NaN and Inf
                    "funroll-loops",
                    "finline-functions",
                    "finline-limit=20000",
                    "s"
                ],
                # Asserts can leave variables unused, making warnings spurious.
                # We count on debug builds to catch actual unused variables.
                "warn" : [
                    "Wno-unused-variable",
                    "Wno-unused-parameter",
                ],
            },
            "defines" : [ "NDEBUG" ],
        },
    },

    "gcc, release_native" : {
        "appends" : {
            "flags" : {
                "compile" : [
                    "Ofast",
                    "ffast-math",
                    "fno-finite-math-only", # Needed with -ffast-math for proper handling of NaN and Inf
                    "funroll-loops",
                    "finline-functions",
                    "finline-limit=20000",
                    "s",
                    "march=native",
                    "mtune=native",
                ],
                # Asserts can leave variables unused, making warnings spurious.
                # We count on debug builds to catch actual unused variables.
                "warn" : [
                    "Wno-unused-variable",
                    "Wno-unused-parameter",
                ],
            },
            "defines" : [ "NDEBUG" ],
        },
    },

    "gcc, release_symbols" : {
        "appends" : {
            "flags" : {
                "compile" : [
                    "O3",
                    "ffast-math",
                    "fno-finite-math-only", # Needed with -ffast-math for proper handling of NaN and Inf
                    "funroll-loops",
                    "finline-functions",
                    "finline-limit=20000",
                    "s"
                ],
                "mode" : [
                    "g",
                    "ggdb",
                    "fno-omit-frame-pointer", # Keep frame pointer information, to help with stack traces
                ],
                # Asserts can leave variables unused, making warnings spurious.
                # We count on debug builds to catch actual unused variables.
                "warn" : [
                    "Wno-unused-variable",
                    "Wno-unused-parameter",
                ],
            },
            "defines" : [ "NDEBUG" ],
        },
    },

    "gcc, release_debug" : {
        "appends" : {
            "flags" : {
                "compile" : [
                    "O3",
                    "ffast-math",
                    "fno-finite-math-only", # Needed with -ffast-math for proper handling of NaN and Inf
                    "funroll-loops",
                    "finline-functions",
                    "finline-limit=20000",
                    "s",
                ],
                "mode" : [
                    "g",
                    "ggdb",
                    "ffloat-store",
                    "fno-omit-frame-pointer", # Keep frame pointer information, to help with stack traces
                    # "fstack-check",
                ],
                # Asserts can leave variables unused, making warnings spurious.
                # We count on debug builds to catch actual unused variables.
                "warn" : [
                    "Wno-unused-variable",
                    "Wno-unused-parameter",
                ],
            },
            #"defines" : [ "NDEBUG" ],

            # enable STL debug mode, see https://gcc.gnu.org/onlinedocs/libstdc++/manual/debug_mode_using.html
            "defines" : [ "_GLIBCXX_DEBUG" ],
        },
    },

    "gcc, |cxx_ver:>=13.0|" : {
        "appends" : {
            "flags" : {
                "warn" : [
                    "Wno-error=array-bounds=", # There's a probably spurious "__builtin_memmove() forming offset is out of the bounds" warning for vector1<bool>
                    "Wno-error=stringop-overread", # Issue with Eigen
                    "Wno-error=restrict", # Issue with json-spirit
                    "Wno-error=dangling-reference", # Too agressive.
                ],
            },
        },
    },

    "gcc, |cxx_ver:>=12.0,<13.0|" : {
        "appends" : {
            "flags" : {
                "warn" : [
                    "Wno-error=array-bounds", # There's a probably spurious "__builtin_memmove() forming offset is out of the bounds" warning for vector1<bool>
                    "Wno-error=restrict", # Issue with json-spirit
                    "Wno-error=use-after-free", # Issue with utility/tag/Tag.cc
                ],
            },
        },
    },

    "gcc, |cxx_ver:>9.0|" : {
        "removes" : {
            "flags" : {
                "cxx" : [
                    "ffor-scope",
                ],
            },
        },
    },

    "gcc, 8.1" : {
        "appends" : {
            "flags" : {
                "link" : [
                    "--no-as-needed",
                ],
                "compile" : [
                    "--no-as-needed",
                ],
            },
        },
    },

    "gcc, 4.9, release_debug" : {
        "appends" : {
            "flags" : {
                 # disable the strict-overflow warning produced by DynamicIndexRange.hh
                "warn" : [ "Wstrict-overflow=0" ],
            },
        },
    },

    "gcc, release_debug_no_symbols" : {
        "appends" : {
            "flags" : {
                "compile" : [
                    "O3",
                    "ffast-math",
                    "fno-finite-math-only", # Needed with -ffast-math for proper handling of NaN and Inf
                    "funroll-loops",
                    "finline-functions",
                    "finline-limit=20000",
                    "s",
                    "ffloat-store", # "mfpmath=sse", "msse2",  WARNING WARNING WARNING this flags SIGNIFICANTLY degrade performance and only used to improved stability for integration tests, they should NEVER be enabled for production code
                ],
                # Asserts can leave variables unused, making warnings spurious.
                # We count on debug builds to catch actual unused variables.
                "warn" : [
                    "Wno-unused-variable",
                    "Wno-unused-parameter",
                ],
            },
            #"defines" : [ "NDEBUG" ],

            # enable STL debug mode, see https://gcc.gnu.org/onlinedocs/libstdc++/manual/debug_mode_using.html
            "defines" : [ "_GLIBCXX_DEBUG" ],
        },
    },

    "gcc, profile" : {
        "appends" : {
            "flags" : {
                "compile"  : [
                    "O3",
                    "ffast-math",
                    "fno-finite-math-only", # Needed with -ffast-math for proper handling of NaN and Inf
                    "funroll-loops",
                    "finline-functions",
                    "finline-limit=20000"
                ],
                # These flags enable the actual profiling.
                # -g allows line by line profiling.
                "mode" : [
                    "fno-omit-frame-pointer",  # Keep frame pointer information, to help with stack traces
                    "g",
                    "ggdb",
                    "pg"
                ],
                "link" : [
                    "g",
                    "ggdb",
                    "pg"
                ],
                # Asserts can leave variables unused, making warnings spurious.
                # We count on debug builds to catch actual unused variables.
                "warn" : [
                    "Wno-unused-variable",
                    "Wno-unused-parameter",
                ],
            },
            "defines" : [ "NDEBUG" ],
        },
    },

    # PyRosetta is no longer built with scons -- see src/python/PyRosetta/build.py instead for settings

    # Mode adding special instrumentation to check for (sanitize) address errors
    # only supported by gcc ver > 4.8
    "gcc, addsan" : {
        "appends" : {
            "flags" : {
                "compile" : [
                    "O1",
                    "fsanitize=address",
                    "fno-optimize-sibling-calls",
                ],
                "mode" : [
                    "g",
                    "fno-omit-frame-pointer", # Keep frame pointer information, to help with stack traces
                ],
                "link" : [
                    "fsanitize=address",
                ],
                # Asserts can leave variables unused, making warnings spurious.
                # We count on debug builds to catch actual unused variables.
                "warn" : [
                    "Wno-unused-variable",
                    "Wno-unused-parameter",
                ],
            },
            #"defines" : [ "NDEBUG" ],
        },
    },

    # Mode adding special instrumentation to check for (sanitize) multi-threading errors
    # only supported by gcc ver > 4.8
    "gcc, tsan" : {
        "appends" : {
            "flags" : {
                "compile" : [
                    "O1",
                    "fsanitize=thread",
                    "fno-optimize-sibling-calls",
                ],
                "mode" : [
                    "g",
                    "fno-omit-frame-pointer", # Keep frame pointer information, to help with stack traces
                ],
                "link" : [
                    "fsanitize=thread",
                ],
                # Asserts can leave variables unused, making warnings spurious.
                # We count on debug builds to catch actual unused variables.
                "warn" : [
                    "Wno-maybe-uninitialized",
                    "Wno-unused-variable",
                    "Wno-unused-parameter",
                ],
            },
            #"defines" : [ "NDEBUG" ],
        },
    },

#    # Mode adding special instrumentation to check for (sanitize) memory errors
#    # (Not currently supported by any gcc version)
#    "gcc, memsan" : {
#        "appends" : {
#            "flags" : {
#                "compile" : [
#                    "O1",
#                    "fsanitize=memory",
#                    "fno-optimize-sibling-calls",
#                    "fPIE",
#                    "pie",
#                ],
#                "mode" : [
#                    "g",
#                    "fno-omit-frame-pointer", # Keep frame pointer information, to help with stack traces
#                ],
#                "link" : [
#                    "fsanitize=memory",
#                ],
#                # Asserts can leave variables unused, making warnings spurious.
#                # We count on debug builds to catch actual unused variables.
#                "warn" : [
#                    "Wno-unused-variable",
#                    "Wno-unused-parameter",
#                ],
#            },
#            #"defines" : [ "NDEBUG" ],
#        },
#    },

    # Mode adding special instrumentation to check for (sanitize) undefined behavior
    # only supported by gcc ver > 4.9
    #
    # Note: Set the environment variable "UBSAN_OPTIONS=print_stacktrace=1" to get a backtrace in addition to the error message
    "gcc, ubsan" : {
        "appends" : {
            "flags" : {
                "compile" : [
                    "O1",
                    "fsanitize=undefined",
                    "fno-sanitize-recover=all", # Error out immediately once an error is encountered
                    "fno-sanitize=alignment", # x86 (where these tests are run) is fine with misaligned data, and the compilers don't bother padding.
                    "fno-optimize-sibling-calls",
                    "fPIE",
                    "pie",
                ],
                "mode" : [
                    "g",
                    "fno-omit-frame-pointer", # Keep frame pointer information, to help with stack traces
                ],
                "link" : [
                    "fsanitize=undefined",
                ],
                # Asserts can leave variables unused, making warnings spurious.
                # We count on debug builds to catch actual unused variables.
                "warn" : [
                    "Wno-unused-variable",
                    "Wno-unused-parameter",
                ],
            },
            #"defines" : [ "NDEBUG" ],
        },
    },

    # cats ####################################################################

    "gcc, src" : {
        "appends" : {
            "flags" : {
                # We can't have exceptions for efficiency reasons.
                #"compile" : [ "fno-exceptions" ],
            },
        },
    },

    "gcc, test" : {
        "appends" : {
            "flags" : {
                # The "isystem" items here are to tell gcc to not print warn-
                # ings from this external header.
                "cc" : [ "isystem external/cxxtest/"],
                "cxx" : [ "isystem external/cxxtest/"],
            },
        },
        "removes" : {
            "flags" : {
                #"compile" : [ "fno-exceptions" ],
            },
        },
    },

    "gcc, doc" : {
        # Default Doxygen settings go here, if they differ from the defaults
        # created by the Doxygen builder.
    },


    # extras ##################################################################

    "gcc, bcl" : {
        "appends" : {
            "include_path"  : [
                "#external/bcl/include",
            ],
            "defines"       : [ "USEBCL" ],
            "flags" : {
                "warn" : [
                    "Wno-deprecated",
                ],
                "compile" : [
                    "fno-pretty-templates", "DBCL_NO_OS_SIGNAL_HANDLING",
                    "fPIC"
                ],
                "cc" : [
                    "isystem external/bcl",
                    "isystem external/bcl/include",
                ],
                "cxx" : [
                    "isystem external/bcl",
                    "isystem external/bcl/include",
                    #"fno-omit-frame-pointer", # -- useful for profiling on linux using RotateRight's Zoom profiler
                ],
            },
        },
        "removes" : {
            "defines" : [ "_GLIBCXX_DEBUG" ],
        },
    },

    "gcc, bcl, release" : {
        "removes" : {
            "flags" : {
                # See comment above for rational here.
                "warn" : ["Werror=unused-parameter", "Werror=unused-variable"],
            }
        },
    },

    "gcc, boinc" : {
        "appends" : {
            # Leading '#' means relative to the base directory, (i.e.,
            # main/external/boinc/api, etc.)
            "include_path"  : [
                "#external/boinc/api",
                "#external/boinc",
                "#external/boinc/lib",
                "#external/boinc/zip",
            ],
            # This file was only needed when building BOINC from source
            # (instead of using libs).
            #"includes" : [ "external/boinc/config.h" ],
            # The library_path must be defined depending on platform -- e.g.,
            # see gcc, macos, boinc (below).
            "libraries" : [
                "boinc_api",
                "boinc",
                "boinc_zip"
            ],
            "defines" : [
                "BOINC",
                "NOCRASHREPORT",
            ],
            "flags" : {
                "compile" : [ "pthread" ],
                "warn" : [ "Wno-write-strings", "Wno-uninitialized", ],
            },
        },
        "removes" : {
            "flags" : {
                # BOINC headers won't work with -pedantic.
                "warn" : [ "pedantic" ],
                "compile" : [
                    "march=pentium4",
                    "march=athlon",
                    "mtune=itanium2"
                ],
            },
        },
    },

    "gcc, linux, boinc" : {
        "appends" : {
            "include_path"  : [
                "#external",
                "#external/dbio",
                #"/usr/include/GL"
            ],
            "libraries" : [
                "pthread",
                "boinc_graphics2",
            ],
            "library_path" : [
                "#external/boinc/api",
                "#external/boinc/lib",
                "#external/boinc/zip",
            ],
            "defines" : [
                "BOINC_GRAPHICS",
                "NOCRASHREPORT",
            ],
            "flags" : {
                "warn" : [
                    "Wno-unused-variable",
                    "Wno-unused-parameter",
                    "Wno-parentheses",
                    #"Wno-unused-but-set-variable",
                ],
                #"link" : [ "Wl,-Bdynamic -lglut -lGL -lGLU -Wl,--dynamic-linker=/lib64/ld-linux-x86-64.so.2"  ],
            },
        },
    },

    "gcc, macos, boinc" : {
        "appends" : {
            "libraries" : [ "boinc_graphics2" ],
            "library_path" : [
                "#external/boinc/mac_build/build/Deployment",
                "#external/boinc/zip",
                "/usr/X11R6/lib"
            ],
            "include_path" : [
                "#external",
                "#external/dbio"
            ],
            "defines" : [
                "MAC",
                "BOINC_GRAPHICS",
                "GL_GRAPHICS",
                "NOCRASHREPORT",
            ],
            "flags" : {
                "link" : [
                    "framework GLUT",
                    "framework OpenGL",
                    "framework Cocoa"
                ],
                "shlink" : [
                    "framework GLUT",
                    "framework OpenGL",
                    "framework Cocoa"
                ],
            },
        },
        "removes" : {
            "flags" : {
                "compile" : [ "pthread" ],
            },
        },
    },

    # This target is somewhat sketchy in its implementation.
    # It ought to be done as a separate executable.
    # Deprecated.  If it isn't used within a certain time frame it will go away.
    # Does this need to be linux only?
    "gcc, linux, graphics" : {
        "appends" : {
            "libraries" : [
                "pthread",
                "GL",
                "GLU",
                "glut"
            ],
            "defines" : [ "GL_GRAPHICS" ],
        },
    },

    "gcc, cxx14" : {
        "appends" : {
            "defines" : [ "CXX14", "CXX14_OR_LATER" ],
            "flags" : {
                "cxx" : [ "std=c++1y" ],
            },
        },
        "removes" : {
            "flags" : {
                "cxx" : [ "std=c++0x" ],
            },
        },
    },

    "gcc, cxx17" : {
        "appends" : {
            "defines" : [ "CXX17", "CXX17_OR_LATER", "CXX14_OR_LATER" ],
            "flags" : {
                "cxx" : [ "std=c++1z" ],
                "warn" : [
                    "Wno-unknown-attributes",
                ],
            },
        },
        "removes" : {
            "flags" : {
                "cxx" : [ "std=c++0x" ],
            },
        },
    },

    "gcc, cxx20" : {
        "appends" : {
            "defines" : [ "CXX20", "CXX20_OR_LATER", "CXX17_OR_LATER", "CXX14_OR_LATER" ],
            "flags" : {
                "cxx" : [ "std=c++2a" ],
                "warn" : [
                    "Wno-unknown-attributes",
                ],
            },
        },
        "removes" : {
            "flags" : {
                "cxx" : [ "std=c++0x" ],
            },
        },
    },

    "gcc, hdf5" : {
        "appends" : {
            "defines" : [ "USEHDF5" ],
            "libraries" : [ "libhdf5", "libhdf5_cpp", "libhdf5_hl", "libhdf5_hl_cpp"],
        },
    },

    "gcc, macos, graphics" : {
        "appends" : {
            "include_path" : [ "/usr/X11R6/include" ],
            "library_path" : [ "/usr/X11R6/lib" ],
            "defines" : [
                "GL_GRAPHICS",
                "MAC"
            ],
            "flags" : {
                "link" : [
                    "framework GLUT",
                    "framework OpenGL",
                    "dylib_file /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib:/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib"
                ],
                "shlink" : [
                    "framework GLUT",
                    "framework OpenGL",
                    "dylib_file /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib:/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib"
                ],
            },
        },
    },

    # Below is a fix for compiling with extras=graphics on OSX 10.5.  For more
    # information, see Apple's page here:
    # http://developer.apple.com/qa/qa2007/qa1567.html
    # tex - 8/8/2008
    #"gcc, macos, 9.4, graphics" : {
    #    "appends" : {
    #        "flags" : {
    #            "compile" : [
    #                 "-dylib_file /system/library/frameworks/opengl.framework/versions/a/libraries/libgl.dylib:/system/library/frameworks/opengl.framework/versions/a/libraries/libgl.dylib"
    #            ],
    #        },
    #    },
    #},


    "gcc, mpi" : {
        "appends" : {
            "defines" : [ "USEMPI", "OMPI_SKIP_MPICXX" ],
        },
        "overrides" : {
            "cc" : "mpicc",
            "cxx" : "mpiCC",
        },
    },

    "gcc, macos, mpi" : {
        "appends" : {
            "defines" : [ "USEMPI", "OMPI_SKIP_MPICXX" ],
        },
        "overrides" : {
            "cc" : "mpicc",
            "cxx" : "mpicxx",
        },
    },


    "gcc, linux, static" : {
        "appends" : {
            "flags" : {
                "link" : [ "static" ],
            },
        },
    },


    "gcc, gprof" : {
        "appends" : {
            "flags" : {
                "link" : [ "pg" ],
                "compile" : [ "pg" ],
            },
        },
    },


    "gcc, gcov" : {  # settings for gcov, code coverage tool for GCC
        "appends" : {
            "flags" : {
                "compile" : [
                    "fprofile-arcs",
                    "ftest-coverage"
                ],
                "link" : [ "-coverage" ],
            },
        },
    },


    "gcc, rosetta_float" : {
        "appends" : {
            "defines" : [ "ROSETTA_FLOAT" ],
        },
    },


    "gcc, omp" : {
        "appends" : {
            "defines" : [
                "USE_OPENMP",
                "MULTI_THREADED",
            ],
            "flags" : {
                "compile" : [ "fopenmp" ],
            },
            "libraries" : [ "gomp" ],
        },
    },


    "gcc, python" : {
        "appends" : {
            "include_path" : [ "#external/include/python2.7" ],
            "defines" : [ "WITH_PYTHON=1" ],
            "libraries" : [
                "python2.7",
                "dl",
                "pthread",
                "util"
            ],
        },
        "removes" : {
            "flags" : {
                "warn" : [
                    # We turn off warnings as errors for Python build
                    # only because the automatic Python interface wrapping
                    # can introduce warnings.
                    "Werror",
                ],
            },
        },
    },


    "gcc, mysql" : {
        "appends" : {
            "defines" : [ "USEMYSQL" ],
            "library_path" : [ "/usr/lib64/mysql" ],
        },
    },


    "gcc, postgres" : {
        "appends" : {
            "defines" : [ "USEPOSTGRES" ],
        },
    },


    "gcc, ptr_boost" : {
        "appends" : {
            "defines" : [
                "PTR_BOOST",
            ],
        },
        "removes" : {
            "defines" : [
                "PTR_STD"
            ],
        },
    },

    "gcc, opencl" : {
        "appends" : {
            "include_path" : [
                "/opt/AMDAPP/include",
                "/opt/AMDAPP/include/CL",
                "/opt/AMDAPP/lib/x86",
                "/opt/AMDAPP/lib/x86_64",
            ],
            "libraries" : [ "OpenCL" ],
            "library_path" : [ "/opt/AMDAPP/lib/x86_64", ],
            "defines" : [ "USEOPENCL" ],
        },
    },

    "gcc, macos, opencl" : {
        "appends" : {
            "include_path" : [
                r"/Developer/GPU\ Computing/OpenCL/common/inc",
                r"/Developer/GPU\ Computing/OpenCL/common/inc/CL",
                r"/Developer/GPU\ Computing/shared/inc",
                r"/Developer-3.2.6/GPU\ Computing/OpenCL/common/inc",
                r"/Developer-3.2.6/GPU\ Computing/OpenCL/common/inc/CL",
                r"/Developer-3.2.6/GPU\ Computing/shared/inc"
            ],
            #"include_path" : [\
            #    r"/Developer-3.2.6/GPU\ Computing/OpenCL/common/inc",
            #    r"/Developer-3.2.6/GPU\ Computing/OpenCL/common/inc/CL",
            #    r"/Developer-3.2.6/GPU\ Computing/shared/inc"
            #],
            #"include_path" : [
            #    r"/Developer/GPU\ Computing/OpenCL/common/inc",
            #    r"/Developer/GPU\ Computing/OpenCL/common/inc/CL",
            #    r"/Developer/GPU\ Computing/shared/inc"
            #],
            #"libraries" : [ "OpenCL" ],
            #"library_path" : [ r"/Developer/CUDA/lib" ],
            "defines"  : [
                "USEOPENCL",
                "MACOPENCL"
            ],
            "flags" : {
                "link" : [ "framework OpenCL" ],
                "shlink" : [ "framework OpenCL" ],
            }
        },
        "removes" : {
            "include_path" : [ "/usr/local/cuda/include", ],
            "libraries" : [ "OpenCL" ],
            "library_path" : [
                "/usr/local/cuda/lib64",
                "/usr/local/cuda/lib",
            ],
        }
    },


    "gcc, boost_mpi" : {
        "appends" : {
            "libraries"  : [
                "libboost_serialization",
                "libboost_mpi"
            ],
            "library_path" : [ "/usr/local/lib" ],
            "defines" : [ "USEBOOSTMPI" ],
        },
        "overrides" : {
            "cc" : "mpicc",
            "cxx" : "mpiCC",
        },
    },


    "gcc, lto" : {
        "appends" : {
            "flags" : {
                "compile" : [
                    "flto",
                    "fwhole-program"
                ],
                "link" : [
                    "flto",
                    "fwhole-program"
                ],
            },
        },
    },

    "gcc, cxx11thread" : {
        "appends" : {
            "defines" : [
                "MULTI_THREADED"
            ],
            #"flags" : {
            #    "compile" : [
            #        "fno-builtin-malloc",
            #        "fno-builtin-calloc",
            #        "fno-builtin-realloc",
            #        "fno-builtin-free",
            #    ]
            #},
            "libraries" : [
                "pthread",
                #"tcmalloc",
            ]
        },
    },

    "gcc, serialization" : {
        "appends" : {
            "defines" : [
                "SERIALIZATION",
            ],
        },
    },

    "gcc, tensorflow" : {
        "appends" : {
            "defines" : [
                "USE_TENSORFLOW",
                "USE_TENSORFLOW_CPU",
            ],
            "libraries" : [
                "tensorflow",
            ],
        },
        "flags" : {
            "link" : [
                "tensorflow",
            ],
        },
    },

    "gcc, tensorflow_gpu" : {
        "appends" : {
            "defines" : [
                "USE_TENSORFLOW",
                "USE_TENSORFLOW_GPU",
            ],
            "libraries" : [
                "tensorflow",
            ],
        },
        "flags" : {
            "link" : [
                "tensorflow",
            ],
        },
    },

    "gcc, torch" : {
        "appends" : {
            "defines" : [
                "USE_TORCH",
                "CXX14",
                "CXX14_OR_LATER",
                # Uncomment if using torchlib with pre-cxx11 ABI
                # "_GLIBCXX_USE_CXX11_ABI=0",
            ],
            "libraries" : [
                "c10",
                "torch",
                "torch_cpu",
                "torch_global_deps",
            ],
            "library_path" : [ "#external/libtorch/lib/" ],
            "include_path" : [ "#external/libtorch/include/" ],
            "flags" : {
                "cxx" : [ "std=c++1y" ],
                "link" : [
                    # These two lines avoid the need to set LD_LIBRARY_PATH ...
                    # ... at linking
                    "Wl,-rpath=external/libtorch/lib/",
                    # ... at runtime
                    "Wl,-rpath=\\$$ORIGIN/../../../../../../../../../../external/libtorch/lib/",
                ],
            },
        },
        "removes" : {
            "flags" : {
                "cxx" : [ "std=c++0x" ],
                "warn" : [ "Werror" ],
            },
        },
    },

    "gcc, torch_gpu" : {
        "appends" : {
            "defines" : [
                "USE_TORCH",
		"USE_TORCH_GPU",
		#Libtorch with cuda needs at least C++17
                "CXX17",
                "CXX17_OR_LATER",
                # Uncomment if using torchlib with pre-cxx11 ABI
                # "_GLIBCXX_USE_CXX11_ABI=0",
            ],
            "libraries" : [
                "c10",
                "torch",
                "torch_cpu",
                "torch_global_deps",
            ],
            "library_path" : [ "#external/libtorch/lib/" ],
            "include_path" : [ "#external/libtorch/include/" ],
            "flags" : {
                "cxx" : [ "std=c++17" ],
                "link" : [
                    # These two lines avoid the need to set LD_LIBRARY_PATH ...
                    # ... at linking
                    "Wl,-rpath=external/libtorch/lib/",
                    # ... at runtime
                    "Wl,-rpath=\\$$ORIGIN/../../../../../../../../../../external/libtorch/lib/",
                ],
            },
        },
        "removes" : {
            "flags" : {
                "cxx" : [ "std=c++0x" ],
                "warn" : [ "Werror" ],
            },
        },
    },



    "gcc, zeromq" : {
        "appends" : {
            "defines" : [
                "SERIALIZATION",
                "ZEROMQ",
            ],
        },
    },

    "gcc, apbs" : {
        "appends" : {
            "defines" : [ "LINK_APBS_LIB" ],
            "libraries" : [
                "iapbs",
                "apbs_routines",
                "apbs_generic",
                "apbs_mg",
                "apbs_pmgc",
                "maloc"
            ],
            "library_path" : [ "#external/apbs/apbs-1.4-rosetta/lib" ],
            "include_path" : [
                "#external/apbs/apbs-1.4-rosetta/include",
                "#external/apbs/apbs-1.4-rosetta/include/iapbs",
                "#external/apbs/apbs-1.4-rosetta/include/maloc",
                "#external/apbs/apbs-1.4-rosetta/src",
            ],
        },
    },

    # the android toolchain should be built into the external directory
    "gcc, android_arm" : {
        "appends" : {
            "library_path"    : [
                "#external/androidarm-tc/arm-linux-androideabi/lib",
                "#external/androidarm-tc/sysroot/usr/lib",
            ],
            "defines"   : [
                "ANDROID",
                "NOCRASHREPORT",
            ],
            "flags" : {
                "cc"        : [
                    "Wall",
                    "O3",
                    "Wno-error=array-bounds",
                    "frtti",
                    "fno-strict-aliasing",
                    "fexceptions",
                ],
                "cxx"        : [
                    "Wall",
                    "O3",
                    "Wno-error=array-bounds",
                    "frtti",
                    "fno-strict-aliasing",
                    "fexceptions",
                ],
                "compile"    : [
                    "fPIE",
                    "pie",
                    '-sysroot=' + os.path.join( os.getcwd(), '../../external/androidarm-tc/sysroot' ),
                    "march=armv7-a",
                    "mfloat-abi=softfp",
                    "mfpu=vfpv3-d16",
                ],
                "link"       : [
                    "fPIE",
                    "pie",
                    "march=armv7-a -Wl,--fix-cortex-a8",
                ],

            },
            "libraries"  : [ "z", "stdc++", ],
        },
        "overrides" : {
            "cc"            : os.path.join( os.getcwd(),'../../external/androidarm-tc/bin/arm-linux-androideabi-gcc'),
            "cxx"           : os.path.join( os.getcwd(),'../../external/androidarm-tc/bin/arm-linux-androideabi-g++'),
            "link"            : os.path.join( os.getcwd(),'../../external/androidarm-tc/bin/arm-linux-androideabi-ld'),
        },
        "removes" : {
           "defines"  : [ "BOINC_GRAPHICS", ],
           "flags" : {
               "warn" : [ "pedantic" ],
               "compile" : [
                   "march=core2",
                   "mtune=generic",
                   "malign-double",
                   "march=pentium4",
                   "march=athlon",
                   "mtune=itanium2"
               ],
               "link" : [ "static" ],
           },
           "include_path" : [
               "/usr/local/include",
               "/usr/include",
               "/usr/include/GL",
               "isystem external/include", # ??? this is a flag, not an include_path variable
               "isystem external",         # ??? ibid
           ],
           "library_path"  : [
               "/lib",
               "/usr/lib",
               "/usr/local/lib",
               "isystem external/lib",
               "isystem external", ],
        },
    },

    ###########################################################################
    # ICC #####################################################################
    ###########################################################################

    "icc" : {
        "appends" : {
            "flags" : {
                "cc" : [
                    "std=c99",
                ],
                "cxx" : [
                    "std=c++0x", # It seems like some versions of ICC have issues with supporting std=c++11
                ],
            },
        },
    },

    # OSs & architecures ######################################################
    "icc, linux" : {
        "appends" : {
            "flags" : {
                "cc" : [
                    "std=c99",

                    "isystem external/boost_submod/",
                    "isystem external/",
                    "isystem external/include/",
                    "isystem external/dbio/",
                    "isystem external/libxml2/include",
                    "isystem external/rdkit",
                ],
                "cxx" : [
                    "std=c++11",

                    "isystem external/boost_submod/",
                    "isystem external/",
                    "isystem external/include/",
                    "isystem external/dbio/",
                    "isystem external/libxml2/include",
                    "isystem external/rdkit",
                ],
                "warn" : [
                    "Wall",
                    # When we ICC on the test server, we should probably turn on warnings-as-errors
                    "w2", # More verbose warnings
                    "Wp64",
                    # Disable Specific warinings
                    # 188: enumerated type mixed with another type
                    # 279: controlling expression is constant
                    # 300: const variable requires an initializer
                    # 488: constant is not used in declaring the parameter types of function template
                    # 654: partial override warning
                    # 1682: implicit conversion of a 64-bit integral type to a smaller integral type
                    # 1684: conversion from pointer to same-sized integral type -- Boost has issues with this
                    # 1170: invalid redeclaration of nested class -- Boost has issues with this
                    # 2196: routine is both "inline" and "noinline" -- Boost has issues with this
                    # 2259: non-pointer conversion from "type" to "type" may lose significant bits
                    # 3656: variable may be used before its value is set
                    # 3682: always error warning
                    "wd188,279,300,488,654,1682,1684,1170,2196,2259,3656,3682",
                ],
                "link" : [ "lsvml", "shared-intel", ],
            },
        },
        "overrides" : {
            "cc" : "icc",
            "cxx" : "icpc",
        },
    },

    "icc, bcl" : {
        "appends" : {
	"include_path"  : [
                "#external/bcl/include",
            ],
            "defines"       : [ "USEBCL" ],
            "flags" : {
                "compile" : [
                    "fno-pretty-templates", "DBCL_NO_OS_SIGNAL_HANDLING",
                    "fPIC"
                ],
                "cc" : [
                    "isystem external/bcl",
                    "isystem external/bcl/include",
                ],
                "cxx" : [
                    "isystem external/bcl",
                    "isystem external/bcl/include",
                    #"fno-omit-frame-pointer", # -- useful for profiling on linux using RotateRight's Zoom profiler
                ],

            },
        },
        "removes" : {
            "defines" : [ "_GLIBCXX_DEBUG" ],
        },
    },

    #"icc, windows" : {
    #    "overrides" : {
    #        "cc" : "icl",
    #        "cxx" : "icl",
    #    },
    #},

    #"icc, *, windows" : {
    #    "appends" : {
    #        "defines" : [
    #            "VC_EXTRALEAN",
    #            "WIN32_LEAN_AND_MEAN",
    #            "NOMINMAX",
    #            "ZLIB_WINAPI"
    #        ],
    #        "flags" : {
    #            "compile" : [
    #                "nologo",
    #                "Zc:forScope",
    #                "GR",
    #                "Wp64",
    #                "Qwd279",
    #                "Qwd1478",
    #                "Qwd1572",
    #            ],
    #            "link" : [  # LINKFLAGS
    #                 "nologo",
    #                 "Zc:forScope",
    #                 "GR",
    #                 "Wp64",
    #                 "Qwd279",
    #                 "Qwd1478",
    #                 "Qwd1572",
    #                 "F2097162",
    #                  # LINKOPTS
    #                  "link",
    #                  "NODEFAULTLIB:libcd",
    #            ],
    #            "warn" : [ "Wp64" ],
    #            #"warn" : [ "wd279,383,869,981,1505,1572" ]
    #        },
    #    },
    #},


    # modes ###################################################################

    "icc, linux, debug" : {
        "appends" : {
            "flags" : {
                "mode" : [ "O0", "g" ],
            },
        },
    },

    "icc, linux, release" : {
        "appends" : {
            "flags" : {
                "compile" : [ "ip" ],
                "mode" : [ "O3" ],
            },
            "defines" : [ "NDEBUG" ],
        },
    },

    "icc, linux, release_debug" : {
        "appends" : {
            "flags" : {
                "compile" : [ "ip" ],
                "mode" : [ "O3", "g" ],
            },
            #"defines" : [ "NDEBUG" ],
        },
    },

    "icc, linux, release_symbols" : {
        "appends" : {
            "flags" : {
                "compile" : [ "ip" ],
                "mode" : [ "O3", "g" ],
            },
            "defines" : [ "NDEBUG" ],
        },
    },

    "icc, linux, release_native" : {
        "appends" : {
            "flags" : {
                "compile" : [ "ip" ],
                "mode" : [ "Ofast", "march=native", "mtune=native" ],
            },
            "defines" : [ "NDEBUG" ],
        },
    },


    #"icc, windows, debug" : {
    #    "appends" : {
    #        "flags" : {
    #            "mode" : [
    #                "Zi",
    #                "Od",
    #                "traceback",
    #                "Qtrapuv",
    #            ],
    #        },
    #    },
    #},

    #"icc, windows, release" : {
    #    "appends" : {
    #        "defines" : [ "NDEBUG" ],
    #        "flags" : {
    #            "mode" : [
    #                "O3",
    #                #"fp:fast", # /fp:fast doesn't handle NaN/Inf properly
    #                "Qprec-div-",
    #                "Qip",
    #            ],
    #        },
    #    },
    #},

    #"icc, windows, profile" : {
    #    "appends" : {
    #        "defines" : [ "NDEBUG" ],
    #        "flags" : {
    #            "mode" : [
    #                "Zi",
    #                "Oy",
    #                "O3",
    #                #"fp:fast", # /fp:fast doesn't handle NaN/Inf properly
    #                "Qprec-div-",
    #                "Qip",
    #            ],
    #        },
    #    },
    #},


    "icc, x86, release" : {
        "appends" : {
            "flags" : {
                "compile" : [
                    "Qoption,c,-ip_ninl_max_stats=500",
                    "Qoption,c,-ip_ninl_max_total_stats=5000",
                ],
            },
        },
    },


    # extras ##################################################################

    "icc, mpi" : {
        "appends" : {
            "defines" : [ "USEMPI", "OMPI_SKIP_MPICXX" ],
        },
        "overrides" : {
            "cc" : "mpicc",
            "cxx" : "mpiCC",
        },
    },


    #"icc, windows, runtimecheck" : {
    #    "appends" : {
    #        "flags" : {
    #            "mode" : [
    #                "Gs0",
    #                "Qfpstkchk",
    #                "RTCsu"
    #            ],
    #        },
    #    },
    #},


    "icc, linux, valgrind" : {
        # Deliberately empty
        # So far no ICC flags need to change for use with valgrind.
    },


    "icc, static" : {
        "appends" : {
            "flags" : {
                "link" : [ "static" ],
            },
        },
    },


    "icc, omp" : {
        "appends" : {
            "defines" : [
                "USE_OPENMP",
            ],
            "flags" : {
                "compile" : [ "openmp" ],
                "link" : ["openmp"],
            },
        },
    },


    "icc, mysql" : {
        "appends" : {
            "defines" : [ "USEMYSQL" ],
        },
    },


    "icc, postgres" : {
        "appends" : {
            "defines" : [ "USEPOSTGRES" ],
        },
    },


    "icc, ptr_boost" : {
        "appends" : {
            "defines" : [
                "PTR_BOOST",
            ],
        },
        "removes" : {
            "defines" : [
                "PTR_STD"
            ],
        },
    },

    "icc, serialization" : {
        "appends" : {
            "defines" : [
                "SERIALIZATION",
            ],
        },
    },

    "icc, tensorflow" : {
        "appends" : {
            "defines" : [
                "USE_TENSORFLOW",
                "USE_TENSORFLOW_CPU",
            ],
            "libraries" : [
                "tensorflow",
            ],
        },
        "flags" : {
            "link" : [
                "tensorflow",
            ],
        },
    },

    "icc, tensorflow_gpu" : {
        "appends" : {
            "defines" : [
                "USE_TENSORFLOW",
                "USE_TENSORFLOW_GPU",
            ],
            "libraries" : [
                "tensorflow",
            ],
        },
        "flags" : {
            "link" : [
                "tensorflow",
            ],
        },
    },

    "icc, zeromq" : {
        "appends" : {
            "defines" : [
                "SERIALIZATION",
                "ZEROMQ",
            ],
        },
    },


    "icc, cxx11thread" : {
        "appends" : {
            "defines" : [
                "MULTI_THREADED"
            ],
            "libraries" : [ "pthread" ],
            "flags"         : {
                "compile" : [ "pthread" ],
            },
        },
    },

    ###########################################################################
    # MS Visual C #############################################################
    ###########################################################################

    "msvc, windows" : {
        "overrides" : {
            "cxx" : "cl",
        },
    },

    "msvc, *, windows" : {
        "appends" : {
            "defines" : [
                "VC_EXTRALEAN",
                "WIN32_LEAN_AND_MEAN",
                "NOMINMAX",
                "_CRT_SECURE_NO_DEPRECATE",
                "_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES",
                "ZLIB_WINAPI",
                "_WIN32",
                "WIN32",
            ],
            "flags" : {
                "compile" : [
                    "nologo",
                    "Zc:forScope",
                    "EHsc",
                    "GR",
                    "wd4258",
                    "wd4355",
                    "wd4996",
                    "TP",
                    "GX",
                ],
                "link" : [
                    # LINKFLAGS
                    #"nologo",
                    #"Zc:forScope",
                    #"EHsc",
                    #"GR",
                    #"wd4258",
                    #"wd4355",
                    #"wd4996",
                    #"F2097152",
                    # LINKOPTS
                    #"link",
                    #"NODEFAULTLIB:libcmt",
                    #'EXPORT',
                    #'NODEFAULTLIB:libcd',
                    "INCREMENTAL:NO",
                    #"MAP",
                    #"MAPINFO:EXPORTS"
                ],
            },
        },
    },


    # modes ###################################################################

    "msvc, windows, debug" : {
        "appends" : {
            "flags" : {
                "compile" : [
                    "Zi",
                    "Od",
                    "Ob0",
                    "RTCcsu",
                    "W1",
                    "MDd",
                    "LD",
                    #"MTd"
                ],
                "link" : [
                    "DEBUG",
                    #"DLL",
                    #"Zi",
                    #"Od",
                    #"Ob0",
                    #"RTCcsu",
                    #'NODEFAULTLIB:msvcrtd',
                ],
            },
        },
    },

    "msvc, windows, release" : {
        "appends" : {
            "defines" : [ "NDEBUG"],
            "flags" : {
                "compile" : [
                    #"fp:fast", # /fp:fast doesn't handle NaN/Inf properly
                    "O2",
                    "Ob2",
                    "MT",
                ],
                "link"      : [
                    #"fp:fast", # /fp:fast doesn't handle NaN/Inf properly
                    #"O2",
                    #"LTCG",
                    #'NODEFAULTLIB:msvcrt',
                ],
            },
        },
    },


    "msvc, windows, profile" : {
        "appends" : {
            "defines" : [ "NDEBUG"],
            "flags" : {
                "compile" : [
                    "Zi",
                    #"fp:fast", # /fp:fast doesn't handle NaN/Inf properly
                    "O2",
                ],
                "link"      : [
                    "Zi",
                    #"fp:fast", # /fp:fast doesn't handle NaN/Inf properly
                    "O2",
                    "fixed:no",
                ],
            },
        },
    },


    # extras ##################################################################

    "msvc, windows, static" : {
        "removes" : {
            "flags" : {
                "compile" : [
                    "MDd",
                    "LD",
                ],
                "link" : [
                    "DLL",
                    "MAP",
                ],
            },
        },
        "appends" : {
            "flags" : {
                "compile" : [
                    "MTd",
                ],
                "link" : [
                    'NODEFAULTLIB:libcd',
                ],
            },
        },
    },


    ###########################################################################
    # XLC #####################################################################
    ###########################################################################

    #"xlc, 7.0, power4" : {  # Datastar (XLC++ 7.0 Power4)
    #    "appends" : {
    #        "defines" : [
    #            "NDEBUG",
    #            "USEMPI",
    #            "MPICH_IGNORE_CXX_SEEK"
    #        ],
    #        "flags" : {
    #            "cxx" : [ "qlanglvl=cpp__func__" ],
    #            "compile" : [
    #                "O3",
    #                "qarch=pwr4",
    #                "qtune=pwr4",
    #                "qmaxmem=64000",
    #            ],
    #        },
    #    },
    #    "overrides" : {
    #        "cc" : "mpcc",
    #        "cxx" : "mpCC",
    #        "version" : [ ],
    #        "include_path" : [
    #            "#external/boost_submod",
    #            "#external/dbio",
    #        ],
    #    },
    #},
    #
    #
    ## Does this need some other extra (e.g. "bluegene")?
    #"xlc, 8.0, ppc" : {  # Blue Gene (XLC++ 8.0 PowerPC)
    #    "appends" : {
    #        "defines" : [
    #            "NDEBUG",
    #            "USEMPI",
    #            "MPICH_IGNORE_CXX_SEEK"
    #        ],
    #        "flags" : {
    #            "cxx" : [ "qlanglvl=cpp__func__" ],
    #            "compile" : [
    #                "O3",
    #                "qhot=nosimd",
    #                "qarch=440",
    #                "qtune=440",
    #                "qmaxmem=-1",
    #            ],
    #        },
    #        "library_path" : [ "/bgl/BlueLight/V1R2M1_020_2006-060110/ppc/bglsys/lib" ],
    #        "libraries" : [
    #            "cxxmpich.rts",
    #            "mpich.rts",
    #            "msglayer.rts",
    #            "rts.rts",
    #            "devices.rts"
    #        ],
    #    },
    #    "overrides" : {
    #        "cc" : "mpcc",
    #        "cxx" : "mpCC",
    #        "version" : [ ],
    #        "include_path" : [
    #            "#external/boost_submod",
    #            "#external/dbio",
    #        ],
    #    },
    #},


    # Does this need some other extra (e.g. "bluegene")?
    "xlc, *, ppc64" : {  # Blue Gene (XLC++ PowerPC)
        "appends" : {
            "defines" : [
                "NDEBUG",
                "USEMPI",
                "MPICH_IGNORE_CXX_SEEK"
            ],
            "library_path" : [ "/bgsys/drivers/ppcfloor/arch/include" ],
            "flags" : {
                "compile" : [ "O3" ],
                "link" : [ "static" ],
                # jk note: Dynamic linking via XLC requires .a files (though
                # dynamic linking shouldn't need them).  The solution is to use
                # static linking.  (This is expected to have static linking,
                # and will.)
            },
        },
        "overrides" : {
            "cc" : "/bgsys/drivers/ppcfloor/comm/bin/mpicc",
            "cxx" : "/bgsys/drivers/ppcfloor/comm/bin/mpicxx",
            "version" : [ ],
            "include_path" : [
                "#external/boost_submod",
                "#external/dbio",
            ],
        },
        "removes" : {
            "include_path" : [
                "/usr/local/include",
                "/usr/include",
            ],
            "library_path" : [
                "/usr/local/lib",
                "/usr/lib",
            ],
        }
    },


    ###########################################################################
    # Clang ###################################################################
    ###########################################################################

    "clang" : {
        "overrides" : {
            "cc" : "clang",
            "cxx" : "clang++",
        },
        "appends" : {
            "flags" : {
                # We don't use any C -- but if we did would it really be C99?
                # Are there portability issues?
                # (The "isystem" directives here are to tell clang not to print
                # warnings found in these external headers.)
                "cc" : [
                    "std=c99",

                    "isystem external/boost_submod/",
                    "isystem external/",
                    "isystem external/include/",
                    "isystem external/dbio/",
                    "isystem external/libxml2/include",
                    "isystem external/rdkit",
                ],
                "cxx" : [
                    "std=c++11",

                    "isystem external/boost_submod/",
                    "isystem external/",
                    "isystem external/include/",
                    "isystem external/dbio/",
                    "isystem external/libxml2/include",
                    "isystem external/rdkit",
                ],
                "compile" : [
                    "march=core2",
                    "mtune=generic",
                    "pipe",
                    "Qunused-arguments",
                    'DUNUSUAL_ALLOCATOR_DECLARATION',
                    'ftemplate-depth-256',
                    "stdlib=libstdc++",
                ],
                'shlink' : [ "stdlib=libstdc++"],
                'link' : [ "stdlib=libstdc++"],
                "warn" : [
                    "W",
                    "Wall",
                    "Wextra",
                    "pedantic",
                    #"Weverything",
                    "Werror", # REMOVE FOR RELEASE
                    "Wno-long-long",
                    "Wno-strict-aliasing",
                    #"Winconsistent-missing-override", -- 3.5 doesn't like this one
                    #"Wno-documentation",
                    #"Wno-padded",
                    #"Wno-weak-vtables",
                ],
            },
        },
    },

    # The inconsistent-missing-override flag does nothing w/ clang 3.6
    #"clang, 3.6" : {
    #    "appends" : {
    #        "flags" : {
    #            "warn" : [
    #                "Winconsistent-missing-override",
    #            ],
    #        },
    #    },
    #},

    "clang, |cxx_ver:>=3.7|" : {
        "appends" : {
            "flags" : {
                "warn" : [
                    "Winconsistent-missing-override",
                ],
            },
        },
    },

    "clang, |cxx_ver:>=3.9|" : {
        "appends" : {
            "flags" : {
                "warn" : [
                    "Wcomma",
                ],
            },
        },
    },

    # OSs #####################################################################

    "clang, linux" : {
        "appends" : {
            "flags" : {
                "warn" : [
                    # This will become necessary at some point! and for some compilers
                    # But if you include it now it won't build with clang 3.4 (testing server)
                    #"Wno-undefined-var-template",
                ],
            },
        },
        "prepends" : {
            # This makes clang use libstdc++ 4.4.0 on CentOS.
            # (requires gcc44-c++ and libstdc++44-devel)
            #"library_path" : [ "/usr/lib/gcc/x86_64-redhat-linux6E/4.4.0" ],
        },
    },


    "clang, linux, aarch64" : {
        "removes" : {
            "flags" : {
                "compile" : ["march=native", "march=core2", ],
            },
        },
    },


    "clang, macos" : {
        "appends" : {
            "flags" : {
                # Change 'abspath' to 'file' to use DYLD_LIBRARY_PATH environ-
                # ment variable.
                "compile" : [ "march=native", "mtune=native", "stdlib=libc++", ],
                "shlink" : [ "install_name ${TARGET.abspath}", "stdlib=libc++", ],
                "link"   : [ "stdlib=libc++"],
                # There is at least one variable only used on non-Macs.
                "warn" : ["Wno-unused-variable", "Wno-implicit-function-declaration",],

                #fd OSX clang (at least clang-11 on OSX 10.4 adds /usr/local/include as a default)
                #fd   Declaring it as isystem "demotes" it to under other isystem headers
                "cxx" : [
                    "isystem /usr/local/include",
                ],

            },
        },
        "removes" : {
            "flags" : {
                "link" : [ "$__RPATH", "stdlib=libstdc++", ],
                "shlink" : [ "$LINKFLAGS", "stdlib=libstdc++", ],
                "link"   : [ "stdlib=libstdc++", ],
            },
        },
    },

    "clang, macos, arm" : {
        "removes" : {
            "flags" : {
                "compile" : [ "march=native", "march=core2", ],
            },
        },
    },


    # modes ###################################################################

    "clang, debug" : {
        "appends" : {
            "flags" : {
                "compile" : [ "O0" ],
                "mode" : [ "g" ],
            },

            # looks like debug mode is broken in Xcode 9.0, disbaling this for now
            # enable STL debug mode, see https://libcxx.llvm.org/docs/DesignDocs/DebugMode.html and https://gcc.gnu.org/onlinedocs/libstdc++/manual/debug_mode_using.html
        # I had played around with keeping _GLIBCXX_DEBUG for mac, but it's not strictly necessary
        # as long as SOME tests are running with the stricter settings, and it was hell on a few
        # tests for some reason
            #"defines" : [ "_LIBCPP_DEBUG", "_GLIBCXX_DEBUG" ],
        },
    },

    "clang, release" : {
        "appends" : {
            "flags" : {
                "compile" : [ "O3" ],
                # Asserts can leave variables unused, making warnings spurious.
                # We count on debug builds to catch actual unused variables.
                "warn" : [
                    "Wno-unused-variable",
                    "Wno-unused-parameter",
                ],
            },
            "defines" : [ "NDEBUG" ],
        },
    },

    "clang, release_native" : {
        "appends" : {
            "flags" : {
                "compile" : [ "Ofast", "march=native", "mtune=native" ],
                # Asserts can leave variables unused, making warnings spurious.
                # We count on debug builds to catch actual unused variables.
                "warn" : [
                    "Wno-unused-variable",
                    "Wno-unused-parameter",
                ],
            },
            "defines" : [ "NDEBUG" ],
        },
    },

    "clang, release_symbols" : {
        "appends" : {
            "flags" : {
                "compile" : [ "O3" ],
                "mode" : [
                    "g",
                    "fno-omit-frame-pointer", # Keep frame pointer information, to help with stack traces
                ],
                # Asserts can leave variables unused, making warnings spurious.
                # We count on debug builds to catch actual unused variables.
                "warn" : [
                    "Wno-unused-variable",
                    "Wno-unused-parameter",
                ],
            },
            "defines" : [ "NDEBUG" ],
        },
    },

    "clang, release_debug" : {
        "appends" : {
            "flags" : {
                "compile" : [ "O3" ],
                "mode" : [
                    "g",
                    "fno-omit-frame-pointer", # Keep frame pointer information, to help with stack traces
                ],
                # Asserts can leave variables unused, making warnings spurious.
                # We count on debug builds to catch actual unused variables.
                "warn" : [
                    "Wno-unused-variable",
                    "Wno-unused-parameter",
                ],
            },
            #"defines" : [ "NDEBUG" ],

            # looks like debug mode is broken in Xcode 9.0, disbaling this for now
            # enable STL debug mode, see https://libcxx.llvm.org/docs/DesignDocs/DebugMode.html and https://gcc.gnu.org/onlinedocs/libstdc++/manual/debug_mode_using.html
            #"defines" : [ "_LIBCPP_DEBUG", "_GLIBCXX_DEBUG" ],
        },
    },

    "clang, release_debug_no_symbols" : {
        "appends" : {
            "flags" : {
                "compile" : [
                    "O3",
                    "ffloat-store", # "mfpmath=sse", "msse2",  WARNING WARNING WARNING this flags SIGNIFICANTLY degrade performance and only used to improved stability for integration tests, they should NEVER be enabled for production code
                ],
                # Asserts can leave variables unused, making warnings spurious.
                # We count on debug builds to catch actual unused variables.
                "warn" : [
                    "Wno-unused-variable",
                    "Wno-unused-parameter",
                ],
            },
            #"defines" : [ "NDEBUG" ],

            # looks like debug mode is broken in Xcode 9.0, disbaling this for now
            # enable STL debug mode, see https://libcxx.llvm.org/docs/DesignDocs/DebugMode.html and https://gcc.gnu.org/onlinedocs/libstdc++/manual/debug_mode_using.html
            #"defines" : [ "_LIBCPP_DEBUG", "_GLIBCXX_DEBUG" ],
        },
    },

    # Mode adding special instrumentation to check for (sanitize) address errors
    # Implemented in clang ver > 3.3
    "clang, addsan" : {
        "appends" : {
            "flags" : {
                "compile" : [
                    "O1",
                    "fsanitize=address",
                    "fno-optimize-sibling-calls",
                ],
                "mode" : [
                    "g",
                    "fno-omit-frame-pointer", # Keep frame pointer information, to help with stack traces
                ],
                "link" : [
                    "fsanitize=address",
                ],
                # Asserts can leave variables unused, making warnings spurious.
                # We count on debug builds to catch actual unused variables.
                "warn" : [
                    "Wno-unused-variable",
                    "Wno-unused-parameter",
                ],
            },
            #"defines" : [ "NDEBUG" ],
        },
    },

    # Mode adding special instrumentation to check for (sanitize) address errors
    # Implemented in clang ver > 3.3
    "clang, tsan" : {
        "appends" : {
            "flags" : {
                "compile" : [
                    "O1",
                    "fsanitize=thread",
                    "fno-optimize-sibling-calls",
                ],
                "mode" : [
                    "g",
                    "fno-omit-frame-pointer", # Keep frame pointer information, to help with stack traces
                ],
                "link" : [
                    "fsanitize=thread",
                ],
                # Asserts can leave variables unused, making warnings spurious.
                # We count on debug builds to catch actual unused variables.
                "warn" : [
                    "Wno-maybe-uninitialized",
                    "Wno-unused-variable",
                    "Wno-unused-parameter",
                ],
            },
            #"defines" : [ "NDEBUG" ],
        },
    },


    # Mode adding special instrumentation to check for (sanitize) memory errors
    # Implemented in clang ver > 3.3
    "clang, memsan" : {
        "appends" : {
            "flags" : {
                "compile" : [
                    "O1",
                    "fsanitize=memory",
                    "fno-optimize-sibling-calls",
                    "fPIE",
                    "pie",
                ],
                "mode" : [
                    "g",
                    "fno-omit-frame-pointer", # Keep frame pointer information, to help with stack traces
                ],
                "link" : [
                    "fsanitize=memory",
                ],
                # Asserts can leave variables unused, making warnings spurious.
                # We count on debug builds to catch actual unused variables.
                "warn" : [
                    "Wno-unused-variable",
                    "Wno-unused-parameter",
                ],
            },
            #"defines" : [ "NDEBUG" ],
        },
    },

    # Mode adding special instrumentation to check for (sanitize) undefined behavior
    # Implemented in clang ver > 3.3
    #
    # Note: Set the environment variable "UBSAN_OPTIONS=print_stacktrace=1" to get a backtrace in addition to the error message
    "clang, ubsan" : {
        "appends" : {
            "flags" : {
                "compile" : [
                    "O1",
                    "fsanitize=undefined",
                    "fno-sanitize-recover=all", # Error out immediately once an error is encountered
                    "fsanitize-undefined-trap-on-error", # Die on error, rather than exiting gracefully (for debugging)
                    "fno-sanitize=alignment", # x86 (where these tests are run) is fine with misaligned data, and the compilers don't bother padding.
                    "fno-optimize-sibling-calls",
                    "fPIE",
                    "pie",
                ],
                "mode" : [
                    "g",
                    "fno-omit-frame-pointer", # Keep frame pointer information, to help with stack traces
                ],
                "link" : [
                    "fsanitize=undefined",
                ],
                # Asserts can leave variables unused, making warnings spurious.
                # We count on debug builds to catch actual unused variables.
                "warn" : [
                    "Wno-unused-variable",
                    "Wno-unused-parameter",
                ],
            },
            #"defines" : [ "NDEBUG" ],
        },
    },

    # cats ####################################################################

    "clang, test" : {
        "appends" : {
            "flags" : {
                # The "isystem" items here are to tell Clang to not print warn-
                # ings from these external headers
                "cc" : [ "isystem external/cxxtest/"],
                "cxx" : [ "isystem external/cxxtest/"],
            },
        },
    },


    # extras ##################################################################

    "clang, bcl" : {
        "appends" : {
	"include_path"  : [
                "#external/bcl/include",
            ],

            "defines"       : [ "USEBCL" ],
            "flags" : {
		"compile" : ["DBCL_NO_OS_SIGNAL_HANDLING", "fPIC"],
		"warn"    : [ "Wno-unused-variable", "Wno-deprecated" ],
                "cc" : [
                    "isystem external/bcl",
                    "isystem external/bcl/include",
                ],
                "cxx" : [
                    "isystem external/bcl",
                    "isystem external/bcl/include",
                    #"fno-omit-frame-pointer", # -- useful for profiling on linux using RotateRight's Zoom profiler
                ],
            },
        },
        "removes" : {
            "defines" : [ "_GLIBCXX_DEBUG" ],
        },
    },

    "clang, cxx11thread" : {
        "appends" : {
            "defines" : [
                "MULTI_THREADED"
            ],
            "libraries" : [ "pthread" ]
        },
    },


    "clang, serialization" : {
        "appends" : {
            "flags" : {
                "warn" : [ "Wno-unused-function", ],
            },
            "defines" : [
                "SERIALIZATION",
            ],
        },
    },

    "clang, tensorflow" : {
        "appends" : {
            "defines" : [
                "USE_TENSORFLOW",
                "USE_TENSORFLOW_CPU",
            ],
            "libraries" : [
                "tensorflow",
            ],
        },
        "flags" : {
            "link" : [
                "tensorflow",
            ],
        },
    },

    "clang, tensorflow_gpu" : {
        "appends" : {
            "defines" : [
                "USE_TENSORFLOW",
                "USE_TENSORFLOW_GPU",
            ],
            "libraries" : [
                "tensorflow",
            ],
        },
        "flags" : {
            "link" : [
                "tensorflow",
            ],
        },
    },


    "clang, zeromq" : {
        "appends" : {
            "flags" : {
                "warn" : [ "Wno-unused-function", ],
            },
            "defines" : [
                "SERIALIZATION",
                "ZEROMQ",
            ],
        },
    },

    "clang, cxx14" : {
        "appends" : {
            "defines" : [ "CXX14", "CXX14_OR_LATER" ],
            "flags" : {
                "cxx" : [ "std=c++1y" ],
            },
        },
        "removes" : {
            "flags" : {
                "cxx" : [ "std=c++11" ],
            },
        },
    },

    "clang, cxx17" : {
        "appends" : {
            "defines" : [ "CXX17", "CXX17_OR_LATER", "CXX14_OR_LATER" ],
            "flags" : {
                "cxx" : [ "std=c++1z" ],
                "warn" : [
                    "Wno-unknown-attributes",
                ],
            },
        },
        "removes" : {
            "flags" : {
                "cxx" : [ "std=c++11" ],
            },
        },
    },

    "clang, cxx20" : {
        "appends" : {
            "defines" : [ "CXX20", "CXX20_OR_LATER", "CXX17_OR_LATER", "CXX14_OR_LATER" ],
            "flags" : {
                "cxx" : [ "std=c++2a" ],
                "warn" : [
                    "Wno-unknown-attributes",
                ],
            },
        },
        "removes" : {
            "flags" : {
                "cxx" : [ "std=c++11" ],
            },
        },
    },


    "clang, graphics" : {
        "appends" : {
            "include_path" : [ "/usr/X11R6/include" ],
            "library_path" : [ "/usr/X11R6/lib" ],
            "defines" : [
                "GL_GRAPHICS",
                "MAC"
            ],
            "flags" : {
                "link" : [
                    "framework GLUT",
                    "framework OpenGL",
                    "dylib_file /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib:/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib"
                ],
                "shlink" : [
                    "framework GLUT",
                    "framework OpenGL",
                    "dylib_file /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib:/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib"
                ],
                "warn" : [ "Wno-error=deprecated-declarations" ],

            },
        },
    },

    "clang, mpi" : {
        "appends" : {
            "defines" : [ "USEMPI", "OMPI_SKIP_MPICXX" ],
        },
        "overrides" : {
            "cc" : "mpicc",
            "cxx" : "mpicxx",
        },
    },

    "clang, python" : {  # Include python interpreter.
        "appends" : {
            "include_path" : [ "#external/include/python2.7" ],
            "defines" : [ "WITH_PYTHON=1" ],
            "libraries" : [
                "python2.7",
                "dl",
                "pthread",
                "util"
            ],
        },
        "removes" : {
            "flags" : {
                "warn" : [
                    # We turn off warnings as errors for Python build
                    # only because the automatic Python interface wrapping
                    # can introduce warnings.
                    "Werror",
                ],
            },
        },
    },

    "clang, mysql" : {
        "appends" : {
            "defines" : [ "USEMYSQL" ],
            "library_path" : [ "/usr/lib64/mysql" ],
        },
    },

    "clang, postgres" : {
        "appends" : {
            "defines" : [ "USEPOSTGRES" ],
        },
    },


    "clang, torch" : {
        "appends" : {
            "defines" : [
                "USE_TORCH",
                "CXX14",
                "CXX14_OR_LATER",
                # Uncomment if using torchlib with pre-cxx11 ABI
                # "_GLIBCXX_USE_CXX11_ABI=0",
            ],
            "libraries" : [
                "c10",
                "torch",
                "torch_cpu",
                "torch_global_deps",
            ],
            "library_path" : [ "#external/libtorch/lib/" ],
            "include_path" : [ "#external/libtorch/include/" ],
            "flags" : {
                "cxx" : [ "std=c++1y" ],
                "link" : [
                    # These two lines avoid the need to set LD_LIBRARY_PATH ...
                    # ... at linking
                    "Wl,-rpath=external/libtorch/lib/",
                    # ... at runtime
                    "Wl,-rpath=\\$$ORIGIN/../../../../../../../../../../external/libtorch/lib/",
                ],
            },
        },
        "removes" : {
            "flags" : {
                "cxx" : [ "std=c++0x" ],
                "warn" : [ "Werror" ],
            },
        },
    },

    "clang, torch_gpu" : {
        "appends" : {
            "defines" : [
                "USE_TORCH",
		"USE_TORCH_GPU",
		# Libtorch with cuda needs at least C++17
                "CXX17",
                "CXX17_OR_LATER",
                # Uncomment if using torchlib with pre-cxx11 ABI
                # "_GLIBCXX_USE_CXX11_ABI=0",
            ],
            "libraries" : [
                "c10",
                "torch",
                "torch_cpu",
                "torch_global_deps",
            ],
            "library_path" : [ "#external/libtorch/lib/" ],
            "include_path" : [ "#external/libtorch/include/" ],
            "flags" : {
                "cxx" : [ "std=c++17" ],
                "link" : [
                    # These two lines avoid the need to set LD_LIBRARY_PATH ...
                    # ... at linking
                    "Wl,-rpath=external/libtorch/lib/",
                    # ... at runtime
                    "Wl,-rpath=\\$$ORIGIN/../../../../../../../../../../external/libtorch/lib/",
                ],
            },
        },
        "removes" : {
            "flags" : {
                "cxx" : [ "std=c++0x" ],
                "warn" : [ "Werror" ],
            },
        },
    },


    "clang, opencl" : {
        "appends" : {
            "include_path"  : [ "/usr/local/cuda/include", ],
            "libraries" : [ "OpenCL" ],
            "library_path" : [
                "/usr/local/cuda/lib64",
                "/usr/local/cuda/lib",
            ],
            "defines" : [ "USEOPENCL" ],
        },
    },

    "clang, macos, opencl" : {
        "appends" : {
            "defines"  : [
                "USEOPENCL",
                "MACOPENCL"
            ],
            "flags" : {
                "link" : [ "framework OpenCL" ],
                "shlink" : [ "framework OpenCL" ],
                # GPU code needs to cast into to void pointer
                "warn" : [ "Wno-int-to-void-pointer-cast" ],
            },
        },
        "removes" : {
          "libraries" : [ "OpenCL" ]
        },
    },

    "clang, macos, boinc" : {
        "appends" : {
            "libraries" : [
                "boinc_graphics2",
                "boinc_api",
                "boinc",
                "boinc_zip",
                "freetype",
                "ftgl",
                "bz2",
                "png",
            ],
            "library_path" : [
                "#external/boinc/mac_build/build/Deployment",
                "#external/boinc/zip",
                "#external/boinc/api",
                "#external/boinc/lib",
            ],
            "include_path" : [
                "#external",
                "#external/dbio",
                "#external/boinc/api",
                "#external/boinc",
                "#external/boinc/lib",
                "#external/boinc/zip",
                "#external/boinc/3rdParty/mac/ftgl-2.1.3~rc5/src/",
                "#external/boinc/3rdParty/mac/freetype-2.6.2/include/",
                "/System/Library/Frameworks/OpenGL.framework/Headers/",
                "/System/Library/Frameworks/IOSurface.framework/Headers/",
            ],
            "defines" : [
                "MAC",
                "BOINC",
                "BOINC_GRAPHICS",
                "NOCRASHREPORT",
            ],
            "flags" : {
                "warn" : [
                    "Wno-deprecated-declarations",
                    "Wno-c++11-narrowing",
                ],
                "link" : [
                    "stdlib=libc++",
                    "framework GLUT",
                    "framework OpenGL",
                    "framework Cocoa",
                    "framework IOSurface",
                ],
                "shlink" : [
                    "stdlib=libc++",
                    "framework GLUT",
                    "framework OpenGL",
                    "framework Cocoa",
                    "framework IOSurface",
                ],
            },
        },
        "removes" : {
            "flags" : {
                "compile" : [ "pthread" ],
                "link"   : [ "stdlib=libc++", ],
            },
        },
    },

    "clang, macos, torch" : {
        "appends" : {
            "defines" : [
                "USE_TORCH",
                "CXX14",
                "CXX14_OR_LATER",
                # Uncomment if using torchlib with pre-cxx11 ABI
                # "_GLIBCXX_USE_CXX11_ABI=0",
            ],
            "libraries" : [
                "c10",
                "torch",
                "torch_cpu",
                "torch_global_deps",
            ],
            "library_path" : [ "#external/libtorch/lib/" ],
            "include_path" : [ "#external/libtorch/include/" ],
            "flags" : {
                "cxx" : [ "std=c++1y" ],
                "link" : [
                    # These two lines avoid the need to set LD_LIBRARY_PATH ...
                    # ... at linking
                    "Wl,-rpath,external/libtorch/lib/",
                    # ... at runtime
                    "Wl,-rpath,@loader_path/../../../../../../../../../../external/libtorch/lib/",
                ],
            },
        },
        "removes" : {
            "flags" : {
                "cxx" : [ "std=c++11" ],
                "warn" : [ "Werror" ],
            },
        },
    },

    "clang, macos, torch_gpu" : {
        "appends" : {
            "defines" : [
                "USE_TORCH",
		"USE_TORCH_GPU",
		# Libtorch needs at least CXX17
                "CXX17",
                "CXX17_OR_LATER",
                # Uncomment if using torchlib with pre-cxx11 ABI
                # "_GLIBCXX_USE_CXX11_ABI=0",
            ],
            "libraries" : [
                "c10",
                "torch",
                "torch_cpu",
                "torch_global_deps",
            ],
            "library_path" : [ "#external/libtorch/lib/" ],
            "include_path" : [ "#external/libtorch/include/" ],
            "flags" : {
                "cxx" : [ "std=c++17" ],
                "link" : [
                    # These two lines avoid the need to set LD_LIBRARY_PATH ...
                    # ... at linking
                    "Wl,-rpath,external/libtorch/lib/",
                    # ... at runtime
                    "Wl,-rpath,@loader_path/../../../../../../../../../../external/libtorch/lib/",
                ],
            },
        },
        "removes" : {
            "flags" : {
                "cxx" : [ "std=c++11" ],
                "warn" : [ "Werror" ],
            },
        },
    },

    "clang, ptr_boost" : {
        "appends" : {
            "defines" : [
                "PTR_BOOST",
            ],
        },
        "removes" : {
            "defines" : [
                "PTR_STD"
            ],
        },
    },


    "clang, boost_mpi" : {
        "overrides" : {
            "cc" : "mpicc",
            "cxx" : "mpiCC",
        },
        "appends" : {
            "libraries" : [ "libboost_mpi" ],
            "libraries" : [ "libboost_serialization" ],
            "library_path" : [ "/usr/local/lib" ],
            "defines" : [ "USEBOOSTMPI" ],
        },
    },

    "gcc, cuda" : {
        "appends" : {
            "include_path"  : [ "/usr/local/cuda/include", "#external/include/cuda"],
            "libraries"     : [ "cudart"],
            "library_path"  : [ "/usr/local/cuda/lib64", "/usr/local/cuda/lib"],
            "defines"       : [ "USECUDA" ],
        },
    },


}  # end settings

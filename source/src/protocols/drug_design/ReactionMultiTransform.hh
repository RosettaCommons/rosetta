// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

/// @file src/protocols/drug_design/ReactionMultiTransform.hh
/// @brief apply RDKit's reaction mechanism to transform a ResidueType.
///    Allow for multiple outputs
/// @author Rocco Moretti (rmorettiase@gmail.com)

#ifndef INCLUDED_protocols_drug_design_ReactionMultiTransform_hh
#define INCLUDED_protocols_drug_design_ReactionMultiTransform_hh

#include <protocols/drug_design/ReactionMultiTransform.fwd.hh>
#include <protocols/drug_design/ReactionChemistry.hh>

#include <core/chemical/rdkit/RDKit.fwd.hh>

#include <core/chemical/AtomRefMapping.hh>

#include <core/chemical/MutableResidueType.fwd.hh>

#include <utility/tag/XMLSchemaGeneration.fwd.hh>

#include <string>

namespace protocols {
namespace drug_design {

class ReactionMultiTransform  : public ReactionChemistry {
public:
	ReactionMultiTransform();

	void apply( core::chemical::MutableResidueType & ) override;

	/// @brief Are there alternate ResidueTypes which are availible from the last time we called apply?
	/// (That is, will get_addtional_output() return non-null?)
	bool
	has_additional_output() const override;

	/// @brief Get additional generated ResidueTypes, if any.
	core::chemical::MutableResidueTypeOP
	get_additional_output() override;

	core::chemical::VDVDMapping
	get_mapping() const override;

	/// @brief Initialize any data members of this instance from an input tag
	/// and a DataMap object
	void parse_my_tag(
		utility::tag::TagCOP tag,
		basic::datacache::DataMap & datacache
	) override;

	/// @brief Add a reaction to the list of reactions to use.
	/// Reaction should be written in the synthetic direction with a single reactant and product
	void
	add_reaction( ::RDKit::ChemicalReactionOP rxn, core::Real weight ) override;

	static std::string class_name();
	static void provide_xml_schema( utility::tag::XMLSchemaDefinition & xsd );

private:

	/// @brief The converted input (needed for correspondance mapping of products)
	/// @details Internal implementation detail - do not expose
	::RDKit::RWMolOP rdmol_;

	/// @brief The mapping of input VD to rdmol_ index (needed for correspondance mapping of products)
	/// @details Internal implementation detail - do not expose
	core::chemical::VDIndexMapping input_map_;

	/// @brief A copy of the input residue type to apply(), for use in converting the output
	/// @details Internal implementation detail - do not expose
	core::chemical::MutableResidueTypeOP ref_restype_;

	/// @brief The products generated by the last call to apply()
	utility::vector1< ::RDKit::RWMolOP > products_;

	/// @brief The last product returned by apply()/get_additional_output()
	core::Size last_product_;

	/// @brief The main Input->Output mapping for ResidueTypes
	core::chemical::VDVDMapping mapping_;
};

} // namespace drug_design
} // namespace protocols

#endif
